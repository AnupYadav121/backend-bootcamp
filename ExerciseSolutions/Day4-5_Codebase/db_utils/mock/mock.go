// Code generated by MockGen. DO NOT EDIT.
// Source: db_utils/Dbwork.go

// Package repomock is a generated GoMock package.
package repomock

import (
	models "Day4-5_Codebase/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockInterfaceDB is a mock of InterfaceDB interface.
type MockInterfaceDB struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceDBMockRecorder
}

// MockInterfaceDBMockRecorder is the mock recorder for MockInterfaceDB.
type MockInterfaceDBMockRecorder struct {
	mock *MockInterfaceDB
}

// NewMockInterfaceDB creates a new mock instance.
func NewMockInterfaceDB(ctrl *gomock.Controller) *MockInterfaceDB {
	mock := &MockInterfaceDB{ctrl: ctrl}
	mock.recorder = &MockInterfaceDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterfaceDB) EXPECT() *MockInterfaceDBMockRecorder {
	return m.recorder
}

// DoCreate mocks base method.
func (m *MockInterfaceDB) DoCreate(product *models.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoCreate", product)
	ret0, _ := ret[0].(error)
	return ret0
}

// DoCreate indicates an expected call of DoCreate.
func (mr *MockInterfaceDBMockRecorder) DoCreate(product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoCreate", reflect.TypeOf((*MockInterfaceDB)(nil).DoCreate), product)
}

// DoCreateC mocks base method.
func (m *MockInterfaceDB) DoCreateC(Customer *models.Customer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoCreateC", Customer)
	ret0, _ := ret[0].(error)
	return ret0
}

// DoCreateC indicates an expected call of DoCreateC.
func (mr *MockInterfaceDBMockRecorder) DoCreateC(Customer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoCreateC", reflect.TypeOf((*MockInterfaceDB)(nil).DoCreateC), Customer)
}

// DoCreateO mocks base method.
func (m *MockInterfaceDB) DoCreateO(Order *models.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoCreateO", Order)
	ret0, _ := ret[0].(error)
	return ret0
}

// DoCreateO indicates an expected call of DoCreateO.
func (mr *MockInterfaceDBMockRecorder) DoCreateO(Order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoCreateO", reflect.TypeOf((*MockInterfaceDB)(nil).DoCreateO), Order)
}

// DoCreateOU mocks base method.
func (m *MockInterfaceDB) DoCreateOU(Order *models.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoCreateOU", Order)
	ret0, _ := ret[0].(error)
	return ret0
}

// DoCreateOU indicates an expected call of DoCreateOU.
func (mr *MockInterfaceDBMockRecorder) DoCreateOU(Order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoCreateOU", reflect.TypeOf((*MockInterfaceDB)(nil).DoCreateOU), Order)
}

// DoCreateR mocks base method.
func (m *MockInterfaceDB) DoCreateR(retailer *models.Retailer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoCreateR", retailer)
	ret0, _ := ret[0].(error)
	return ret0
}

// DoCreateR indicates an expected call of DoCreateR.
func (mr *MockInterfaceDBMockRecorder) DoCreateR(retailer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoCreateR", reflect.TypeOf((*MockInterfaceDB)(nil).DoCreateR), retailer)
}

// DoDelete mocks base method.
func (m *MockInterfaceDB) DoDelete(Product *models.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoDelete", Product)
	ret0, _ := ret[0].(error)
	return ret0
}

// DoDelete indicates an expected call of DoDelete.
func (mr *MockInterfaceDBMockRecorder) DoDelete(Product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoDelete", reflect.TypeOf((*MockInterfaceDB)(nil).DoDelete), Product)
}

// DoDeleteC mocks base method.
func (m *MockInterfaceDB) DoDeleteC(Customer *models.Customer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoDeleteC", Customer)
	ret0, _ := ret[0].(error)
	return ret0
}

// DoDeleteC indicates an expected call of DoDeleteC.
func (mr *MockInterfaceDBMockRecorder) DoDeleteC(Customer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoDeleteC", reflect.TypeOf((*MockInterfaceDB)(nil).DoDeleteC), Customer)
}

// DoDeleteR mocks base method.
func (m *MockInterfaceDB) DoDeleteR(retailer *models.Retailer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoDeleteR", retailer)
	ret0, _ := ret[0].(error)
	return ret0
}

// DoDeleteR indicates an expected call of DoDeleteR.
func (mr *MockInterfaceDBMockRecorder) DoDeleteR(retailer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoDeleteR", reflect.TypeOf((*MockInterfaceDB)(nil).DoDeleteR), retailer)
}

// DoFind mocks base method.
func (m *MockInterfaceDB) DoFind(id string, products *[]models.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoFind", id, products)
	ret0, _ := ret[0].(error)
	return ret0
}

// DoFind indicates an expected call of DoFind.
func (mr *MockInterfaceDBMockRecorder) DoFind(id, products interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoFind", reflect.TypeOf((*MockInterfaceDB)(nil).DoFind), id, products)
}

// DoUpdate mocks base method.
func (m *MockInterfaceDB) DoUpdate(Product, newProduct *models.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoUpdate", Product, newProduct)
	ret0, _ := ret[0].(error)
	return ret0
}

// DoUpdate indicates an expected call of DoUpdate.
func (mr *MockInterfaceDBMockRecorder) DoUpdate(Product, newProduct interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoUpdate", reflect.TypeOf((*MockInterfaceDB)(nil).DoUpdate), Product, newProduct)
}

// DoUpdateO mocks base method.
func (m *MockInterfaceDB) DoUpdateO(newOrder models.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoUpdateO", newOrder)
	ret0, _ := ret[0].(error)
	return ret0
}

// DoUpdateO indicates an expected call of DoUpdateO.
func (mr *MockInterfaceDBMockRecorder) DoUpdateO(newOrder interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoUpdateO", reflect.TypeOf((*MockInterfaceDB)(nil).DoUpdateO), newOrder)
}

// FindAllOrders mocks base method.
func (m *MockInterfaceDB) FindAllOrders(id string) (*[]models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllOrders", id)
	ret0, _ := ret[0].(*[]models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllOrders indicates an expected call of FindAllOrders.
func (mr *MockInterfaceDBMockRecorder) FindAllOrders(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllOrders", reflect.TypeOf((*MockInterfaceDB)(nil).FindAllOrders), id)
}

// IsCustomerOrder mocks base method.
func (m *MockInterfaceDB) IsCustomerOrder(id string, Orders *[]models.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsCustomerOrder", id, Orders)
	ret0, _ := ret[0].(error)
	return ret0
}

// IsCustomerOrder indicates an expected call of IsCustomerOrder.
func (mr *MockInterfaceDBMockRecorder) IsCustomerOrder(id, Orders interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsCustomerOrder", reflect.TypeOf((*MockInterfaceDB)(nil).IsCustomerOrder), id, Orders)
}

// IsPresent mocks base method.
func (m *MockInterfaceDB) IsPresent(id string, product *models.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsPresent", id, product)
	ret0, _ := ret[0].(error)
	return ret0
}

// IsPresent indicates an expected call of IsPresent.
func (mr *MockInterfaceDBMockRecorder) IsPresent(id, product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsPresent", reflect.TypeOf((*MockInterfaceDB)(nil).IsPresent), id, product)
}

// IsPresentC mocks base method.
func (m *MockInterfaceDB) IsPresentC(id string, Customer *models.Customer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsPresentC", id, Customer)
	ret0, _ := ret[0].(error)
	return ret0
}

// IsPresentC indicates an expected call of IsPresentC.
func (mr *MockInterfaceDBMockRecorder) IsPresentC(id, Customer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsPresentC", reflect.TypeOf((*MockInterfaceDB)(nil).IsPresentC), id, Customer)
}

// IsPresentCU mocks base method.
func (m *MockInterfaceDB) IsPresentCU(id string, OrderUpdate *models.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsPresentCU", id, OrderUpdate)
	ret0, _ := ret[0].(error)
	return ret0
}

// IsPresentCU indicates an expected call of IsPresentCU.
func (mr *MockInterfaceDBMockRecorder) IsPresentCU(id, OrderUpdate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsPresentCU", reflect.TypeOf((*MockInterfaceDB)(nil).IsPresentCU), id, OrderUpdate)
}

// IsPresentO mocks base method.
func (m *MockInterfaceDB) IsPresentO(id string, Order *models.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsPresentO", id, Order)
	ret0, _ := ret[0].(error)
	return ret0
}

// IsPresentO indicates an expected call of IsPresentO.
func (mr *MockInterfaceDBMockRecorder) IsPresentO(id, Order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsPresentO", reflect.TypeOf((*MockInterfaceDB)(nil).IsPresentO), id, Order)
}

// IsPresentR mocks base method.
func (m *MockInterfaceDB) IsPresentR(id string, retailer *models.Retailer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsPresentR", id, retailer)
	ret0, _ := ret[0].(error)
	return ret0
}

// IsPresentR indicates an expected call of IsPresentR.
func (mr *MockInterfaceDBMockRecorder) IsPresentR(id, retailer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsPresentR", reflect.TypeOf((*MockInterfaceDB)(nil).IsPresentR), id, retailer)
}

// IsPresentRP mocks base method.
func (m *MockInterfaceDB) IsPresentRP(id string, products *models.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsPresentRP", id, products)
	ret0, _ := ret[0].(error)
	return ret0
}

// IsPresentRP indicates an expected call of IsPresentRP.
func (mr *MockInterfaceDBMockRecorder) IsPresentRP(id, products interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsPresentRP", reflect.TypeOf((*MockInterfaceDB)(nil).IsPresentRP), id, products)
}
